{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 215, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/ai-instance.ts"],"sourcesContent":["import {genkit} from 'genkit';\nimport {googleAI} from '@genkit-ai/googleai';\n\nexport const ai = genkit({\n  promptDir: './prompts',\n  plugins: [\n    googleAI({\n      apiKey: process.env.GOOGLE_GENAI_API_KEY,\n    }),\n  ],\n  model: 'googleai/gemini-2.0-flash',\n});\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AAAA;;;AAEO,MAAM,KAAK,CAAA,GAAA,uIAAA,CAAA,SAAM,AAAD,EAAE;IACvB,WAAW;IACX,SAAS;QACP,CAAA,GAAA,2KAAA,CAAA,WAAQ,AAAD,EAAE;YACP,QAAQ,QAAQ,GAAG,CAAC,oBAAoB;QAC1C;KACD;IACD,OAAO;AACT","debugId":null}},
    {"offset": {"line": 239, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/extract-data-from-vehicle-license.ts"],"sourcesContent":["\n'use server';\n\n/**\n * @fileOverview This file defines a Genkit flow for extracting data from a vehicle license or tag image using OCR and a large language model.\n *\n * - extractDataFromVehicleLicense - A function that accepts an image of a vehicle license/tag and returns the extracted data, applying specific formatting and splitting rules. Tip Onay No markings are ignored.\n * - ExtractDataFromVehicleLicenseInput - The input type for the extractDataFromVehicleLicense function, which is a data URI of the image.\n * - ExtractDataFromVehicleLicenseOutput - The output type for the extractDataFromVehicleLicenseOutputSchema function, including saseNo, marka, tipOnayNo (cleaned), tip, varyant, and versiyon.\n */\n\nimport {ai} from '@/ai/ai-instance';\nimport {z} from 'genkit';\n\nconst ExtractDataFromVehicleLicenseInputSchema = z.object({\n  licenseImageDataUri: z\n    .string()\n    .describe(\n      'A photo of a vehicle license or tag, as a data URI that must include a MIME type and use Base64 encoding. Expected format: \\'data:<mimetype>;base64,<encoded_data>\\'.'\n    ),\n});\n\nexport type ExtractDataFromVehicleLicenseInput = z.infer<typeof ExtractDataFromVehicleLicenseInputSchema>;\n\nconst ExtractDataFromVehicleLicenseOutputSchema = z.object({\n  saseNo: z.string().optional().describe('Şase Numarası (VIN)'),\n  marka: z.string().optional().describe('Marka'),\n  tipOnayNo: z.string().optional().describe('Tip Onay Numarası (işaretlemeler olmadan, sadece harf ve rakam)'),\n  // tipVaryantVersiyonCombined is an intermediate field, not in the final output to client normally\n  // but kept in schema for clarity of what the flow might process internally.\n  // It's not part of the final return type to client to avoid confusion.\n  tip: z.string().optional().describe('Tip (işlenmiş, ilk 3 karakter)'),\n  varyant: z.string().optional().describe('Varyant (işlenmiş)'),\n  versiyon: z.string().optional().describe('Versiyon (işlenmiş)'),\n});\n\nexport type ExtractDataFromVehicleLicenseOutput = z.infer<typeof ExtractDataFromVehicleLicenseOutputSchema>;\n\nexport async function extractDataFromVehicleLicense(\n  input: ExtractDataFromVehicleLicenseInput\n): Promise<ExtractDataFromVehicleLicenseOutput> {\n  return extractDataFromVehicleLicenseFlow(input);\n}\n\nconst prompt = ai.definePrompt({\n  name: 'extractDataFromVehicleLicensePrompt',\n  input: {\n    schema: ExtractDataFromVehicleLicenseInputSchema,\n  },\n  output: {\n    // Schema for what the LLM is asked to output\n    schema: z.object({\n        saseNo: z.string().optional().describe('Şase Numarası (VIN)'),\n        marka: z.string().optional().describe('Marka'),\n        tipOnayNo: z.string().optional().describe('Tip Onay Numarası (örneğin e1200746000100 veya e1*2007/46*0001*00). Aradaki işaretlemeler önemsizdir, sadece harf ve rakamları çıkarın.'),\n        tipVaryantVersiyonCombined: z.string().optional().describe('Etikette genellikle bulunan Tip, Varyant ve Versiyon bilgisini içeren metin (örn: \"225CXE1A TFB7R\" veya \"ABCDE12345\" veya \"E1*2001/116*0342*00 / ABCDE / FGHIJ\")'),\n      }),\n  },\n  prompt: `Aşağıdaki araç ruhsatı VEYA etiketi görselinden Şase Numarası, Marka, Tip Onay Numarası ve etikette genellikle bulunan Tip/Varyant/Versiyon bilgisini (tipVaryantVersiyonCombined alanı için) çıkar.\nGörselde bulabildiğin tüm bu alanları doldur. Eğer bir bilgi görselde bulunmuyorsa ilgili alanı boş bırak veya null olarak döndür.\n\nTip Onay Numarası için, metindeki TÜM özel karakterleri (*, /, -, vb.) yok sayarak SADECE harf ve rakamları birleşik olarak çıkar (örneğin \"e1*2007/46*0001*00\" ise \"e1200746000100\" olarak).\nEtiketlerde Tip, Varyant ve Versiyon bilgileri bazen \"225CXE1A TFB7R\" veya \"ABCDE12345\" gibi birleşik bir metin olarak veya \"E1*2001/116*0342*00 / ABCDE / FGHIJ\" gibi bölümlenmiş olarak bulunabilir. Bu birleşik/bölümlenmiş metni 'tipVaryantVersiyonCombined' alanına yaz.\n\nAraç Görseli: {{media url=licenseImageDataUri}}\n  `,\n});\n\nconst extractDataFromVehicleLicenseFlow = ai.defineFlow<\n  typeof ExtractDataFromVehicleLicenseInputSchema,\n  typeof ExtractDataFromVehicleLicenseOutputSchema // Flow output is the final structured schema\n>({\n  name: 'extractDataFromVehicleLicenseFlow',\n  inputSchema: ExtractDataFromVehicleLicenseInputSchema,\n  outputSchema: ExtractDataFromVehicleLicenseOutputSchema,\n},\nasync input => {\n  const response = await prompt(input);\n  const rawOutput = response.output;\n\n  let processedSaseNo = rawOutput?.saseNo;\n  let processedMarka = rawOutput?.marka;\n  let processedTipOnayNo = rawOutput?.tipOnayNo;\n  let processedTip: string | undefined = undefined;\n  let processedVaryant: string | undefined = undefined;\n  let processedVersiyon: string | undefined = undefined;\n\n  // Post-process tipOnayNo: remove ALL non-alphanumeric characters (ignore markings)\n  if (processedTipOnayNo) {\n    processedTipOnayNo = processedTipOnayNo.replace(/[^a-zA-Z0-9]+/g, '');\n  }\n\n  const combinedData = rawOutput?.tipVaryantVersiyonCombined;\n  if (combinedData) {\n    const partsSlashDelimited = combinedData.split(' / ');\n    if (partsSlashDelimited.length === 3) {\n        // Example: \"E1*2001/116*0342*00 / ABCDE / FGHIJ\"\n        // If TipOnayNo from prompt is empty or this part is more complete, use it\n        let potentialTipOnayFromCombined = partsSlashDelimited[0].trim().replace(/[^a-zA-Z0-9]+/g, '');\n        if (!processedTipOnayNo || (potentialTipOnayFromCombined && potentialTipOnayFromCombined.length > (processedTipOnayNo?.length || 0))) {\n            processedTipOnayNo = potentialTipOnayFromCombined;\n        }\n        // The second part is usually the full \"Tip / Varyant\" string for tags like \"FIAT / 312AXA1A 00\"\n        // Or it could be just Varyant like \"ABCDE\" in \"E1... / ABCDE / FGHIJ\"\n        // We will try to split the second part by space if it seems to contain Tip and Varyant\n        const secondPart = partsSlashDelimited[1].trim();\n        const secondPartSplit = secondPart.split(/\\s+/);\n        if (secondPartSplit.length > 1 && secondPartSplit[0].length <=3) { // e.g. \"ABC\" \"DEFGH\"\n            processedTip = secondPartSplit[0].toUpperCase().substring(0,3);\n            processedVaryant = secondPartSplit.slice(1).join(\"\"); // Remaining part is varyant\n        } else { // If no space or first part is long, assume it's just varyant\n            processedTip = secondPart.toUpperCase().substring(0,3); // Still take first 3 for tip\n            processedVaryant = secondPart; // And the whole thing as varyant\n        }\n        processedVersiyon = partsSlashDelimited[2].trim();\n\n    } else {\n        const noSpaceCombined = combinedData.replace(/\\s+/g, '').toUpperCase();\n        // Example: \"225CXE1A TFB7R\" -> \"225CXE1ATFB7R\"\n        // Example: \"225CXL1A TC6C\" -> \"225CXL1ATC6C\"\n\n        if (noSpaceCombined.length >= 3) {\n            processedTip = noSpaceCombined.substring(0, 3);\n            if (noSpaceCombined.length >= 8) { // 3 for tip + 5 for varyant\n                processedVaryant = noSpaceCombined.substring(3, 8);\n                if (noSpaceCombined.length > 8) {\n                    processedVersiyon = noSpaceCombined.substring(8);\n                }\n            } else if (noSpaceCombined.length > 3) { // Has tip, but not enough for full 5-char varyant\n                processedVaryant = noSpaceCombined.substring(3);\n            }\n        } else if (noSpaceCombined.length > 0) { // Too short for 3-char tip rule\n            processedVaryant = noSpaceCombined; // Assign all to varyant as a fallback\n        }\n    }\n  }\n\n  return {\n    saseNo: processedSaseNo,\n    marka: processedMarka,\n    tipOnayNo: processedTipOnayNo,\n    tip: processedTip,\n    varyant: processedVaryant,\n    versiyon: processedVersiyon,\n    // tipVaryantVersiyonCombined is not returned to the client\n  };\n});\n\n    "],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 377, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 428, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAoR,GACjT,kDACA","debugId":null}},
    {"offset": {"line": 442, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAgQ,GAC7R,8BACA","debugId":null}},
    {"offset": {"line": 456, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}