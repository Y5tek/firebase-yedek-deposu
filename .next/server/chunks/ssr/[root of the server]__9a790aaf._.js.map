{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 31, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/card.tsx"],"sourcesContent":["import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n"],"names":[],"mappings":";;;;;;;;;AAAA;AAEA;;;;AAEA,MAAM,qBAAO,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG1B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,4DACA;QAED,GAAG,KAAK;;;;;;AAGb,KAAK,WAAW,GAAG;AAEnB,MAAM,2BAAa,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGb,WAAW,WAAW,GAAG;AAEzB,MAAM,0BAAY,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG/B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,sDACA;QAED,GAAG,KAAK;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,gCAAkB,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGrC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGb,gBAAgB,WAAW,GAAG;AAE9B,MAAM,4BAAc,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QAAI,KAAK;QAAK,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,YAAY;QAAa,GAAG,KAAK;;;;;;AAEhE,YAAY,WAAW,GAAG;AAE1B,MAAM,2BAAa,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,8BAA8B;QAC3C,GAAG,KAAK;;;;;;AAGb,WAAW,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 112, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/button.tsx"],"sourcesContent":["import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n"],"names":[],"mappings":";;;;;AAAA;AACA;AACA;AAEA;;;;;;AAEA,MAAM,iBAAiB,CAAA,GAAA,gKAAA,CAAA,MAAG,AAAD,EACvB,4VACA;IACE,UAAU;QACR,SAAS;YACP,SAAS;YACT,aACE;YACF,SACE;YACF,WACE;YACF,OAAO;YACP,MAAM;QACR;QACA,MAAM;YACJ,SAAS;YACT,IAAI;YACJ,IAAI;YACJ,MAAM;QACR;IACF;IACA,iBAAiB;QACf,SAAS;QACT,MAAM;IACR;AACF;AASF,MAAM,uBAAS,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAC5B,CAAC,EAAE,SAAS,EAAE,OAAO,EAAE,IAAI,EAAE,UAAU,KAAK,EAAE,GAAG,OAAO,EAAE;IACxD,MAAM,OAAO,UAAU,gKAAA,CAAA,OAAI,GAAG;IAC9B,qBACE,8OAAC;QACC,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,eAAe;YAAE;YAAS;YAAM;QAAU;QACxD,KAAK;QACJ,GAAG,KAAK;;;;;;AAGf;AAEF,OAAO,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 172, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/input.tsx"],"sourcesContent":["import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n"],"names":[],"mappings":";;;;AAAA;AAEA;;;;AAEA,MAAM,sBAAQ,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAC3B,CAAC,EAAE,SAAS,EAAE,IAAI,EAAE,GAAG,OAAO,EAAE;IAC9B,qBACE,8OAAC;QACC,MAAM;QACN,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,kYACA;QAEF,KAAK;QACJ,GAAG,KAAK;;;;;;AAGf;AAEF,MAAM,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 201, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/label.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n"],"names":[],"mappings":";;;;AAEA;AACA;AACA;AAEA;AANA;;;;;;AAQA,MAAM,gBAAgB,CAAA,GAAA,gKAAA,CAAA,MAAG,AAAD,EACtB;AAGF,MAAM,sBAAQ,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAI3B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC,iKAAA,CAAA,OAAmB;QAClB,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iBAAiB;QAC9B,GAAG,KAAK;;;;;;AAGb,MAAM,WAAW,GAAG,iKAAA,CAAA,OAAmB,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 233, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/extract-data-from-vehicle-license.ts"],"sourcesContent":["\n'use server';\n\n/**\n * @fileOverview This file defines a Genkit flow for extracting data from a vehicle license or tag image using OCR and a large language model.\n *\n * - extractDataFromVehicleLicense - A function that accepts an image of a vehicle license/tag and returns the extracted data, applying specific formatting and splitting rules. Tip Onay No markings are ignored.\n * - ExtractDataFromVehicleLicenseInput - The input type for the extractDataFromVehicleLicense function, which is a data URI of the image.\n * - ExtractDataFromVehicleLicenseOutput - The output type for the extractDataFromVehicleLicenseOutputSchema function, including saseNo, marka, tipOnayNo (cleaned), tip, varyant, and versiyon.\n */\n\nimport {ai} from '@/ai/ai-instance';\nimport {z} from 'genkit';\n\nconst ExtractDataFromVehicleLicenseInputSchema = z.object({\n  licenseImageDataUri: z\n    .string()\n    .describe(\n      'A photo of a vehicle license or tag, as a data URI that must include a MIME type and use Base64 encoding. Expected format: \\'data:<mimetype>;base64,<encoded_data>\\'.'\n    ),\n});\n\nexport type ExtractDataFromVehicleLicenseInput = z.infer<typeof ExtractDataFromVehicleLicenseInputSchema>;\n\nconst ExtractDataFromVehicleLicenseOutputSchema = z.object({\n  saseNo: z.string().optional().describe('Şase Numarası (VIN)'),\n  marka: z.string().optional().describe('Marka'),\n  tipOnayNo: z.string().optional().describe('Tip Onay Numarası (işaretlemeler olmadan, sadece harf ve rakam)'),\n  // tipVaryantVersiyonCombined is an intermediate field, not in the final output to client normally\n  // but kept in schema for clarity of what the flow might process internally.\n  // It's not part of the final return type to client to avoid confusion.\n  tip: z.string().optional().describe('Tip (işlenmiş, ilk 3 karakter)'),\n  varyant: z.string().optional().describe('Varyant (işlenmiş)'),\n  versiyon: z.string().optional().describe('Versiyon (işlenmiş)'),\n});\n\nexport type ExtractDataFromVehicleLicenseOutput = z.infer<typeof ExtractDataFromVehicleLicenseOutputSchema>;\n\nexport async function extractDataFromVehicleLicense(\n  input: ExtractDataFromVehicleLicenseInput\n): Promise<ExtractDataFromVehicleLicenseOutput> {\n  return extractDataFromVehicleLicenseFlow(input);\n}\n\nconst prompt = ai.definePrompt({\n  name: 'extractDataFromVehicleLicensePrompt',\n  input: {\n    schema: ExtractDataFromVehicleLicenseInputSchema,\n  },\n  output: {\n    // Schema for what the LLM is asked to output\n    schema: z.object({\n        saseNo: z.string().optional().describe('Şase Numarası (VIN)'),\n        marka: z.string().optional().describe('Marka'),\n        tipOnayNo: z.string().optional().describe('Tip Onay Numarası (örneğin e1200746000100 veya e1*2007/46*0001*00). Aradaki işaretlemeler önemsizdir, sadece harf ve rakamları çıkarın.'),\n        tipVaryantVersiyonCombined: z.string().optional().describe('Etikette genellikle bulunan Tip, Varyant ve Versiyon bilgisini içeren metin (örn: \"225CXE1A TFB7R\" veya \"ABCDE12345\" veya \"E1*2001/116*0342*00 / ABCDE / FGHIJ\")'),\n      }),\n  },\n  prompt: `Aşağıdaki araç ruhsatı VEYA etiketi görselinden Şase Numarası, Marka, Tip Onay Numarası ve etikette genellikle bulunan Tip/Varyant/Versiyon bilgisini (tipVaryantVersiyonCombined alanı için) çıkar.\nGörselde bulabildiğin tüm bu alanları doldur. Eğer bir bilgi görselde bulunmuyorsa ilgili alanı boş bırak veya null olarak döndür.\n\nTip Onay Numarası için, metindeki TÜM özel karakterleri (*, /, -, vb.) yok sayarak SADECE harf ve rakamları birleşik olarak çıkar (örneğin \"e1*2007/46*0001*00\" ise \"e1200746000100\" olarak).\nEtiketlerde Tip, Varyant ve Versiyon bilgileri bazen \"225CXE1A TFB7R\" veya \"ABCDE12345\" gibi birleşik bir metin olarak veya \"E1*2001/116*0342*00 / ABCDE / FGHIJ\" gibi bölümlenmiş olarak bulunabilir. Bu birleşik/bölümlenmiş metni 'tipVaryantVersiyonCombined' alanına yaz.\n\nAraç Görseli: {{media url=licenseImageDataUri}}\n  `,\n});\n\nconst extractDataFromVehicleLicenseFlow = ai.defineFlow<\n  typeof ExtractDataFromVehicleLicenseInputSchema,\n  typeof ExtractDataFromVehicleLicenseOutputSchema // Flow output is the final structured schema\n>({\n  name: 'extractDataFromVehicleLicenseFlow',\n  inputSchema: ExtractDataFromVehicleLicenseInputSchema,\n  outputSchema: ExtractDataFromVehicleLicenseOutputSchema,\n},\nasync input => {\n  const response = await prompt(input);\n  const rawOutput = response.output;\n\n  let processedSaseNo = rawOutput?.saseNo;\n  let processedMarka = rawOutput?.marka;\n  let processedTipOnayNo = rawOutput?.tipOnayNo;\n  let processedTip: string | undefined = undefined;\n  let processedVaryant: string | undefined = undefined;\n  let processedVersiyon: string | undefined = undefined;\n\n  // Post-process tipOnayNo: remove ALL non-alphanumeric characters (ignore markings)\n  if (processedTipOnayNo) {\n    processedTipOnayNo = processedTipOnayNo.replace(/[^a-zA-Z0-9]+/g, '');\n  }\n\n  const combinedData = rawOutput?.tipVaryantVersiyonCombined;\n  if (combinedData) {\n    const partsSlashDelimited = combinedData.split(' / ');\n    if (partsSlashDelimited.length === 3) {\n        // Example: \"E1*2001/116*0342*00 / ABCDE / FGHIJ\"\n        // If TipOnayNo from prompt is empty or this part is more complete, use it\n        let potentialTipOnayFromCombined = partsSlashDelimited[0].trim().replace(/[^a-zA-Z0-9]+/g, '');\n        if (!processedTipOnayNo || (potentialTipOnayFromCombined && potentialTipOnayFromCombined.length > (processedTipOnayNo?.length || 0))) {\n            processedTipOnayNo = potentialTipOnayFromCombined;\n        }\n        // The second part is usually the full \"Tip / Varyant\" string for tags like \"FIAT / 312AXA1A 00\"\n        // Or it could be just Varyant like \"ABCDE\" in \"E1... / ABCDE / FGHIJ\"\n        // We will try to split the second part by space if it seems to contain Tip and Varyant\n        const secondPart = partsSlashDelimited[1].trim();\n        const secondPartSplit = secondPart.split(/\\s+/);\n        if (secondPartSplit.length > 1 && secondPartSplit[0].length <=3) { // e.g. \"ABC\" \"DEFGH\"\n            processedTip = secondPartSplit[0].toUpperCase().substring(0,3);\n            processedVaryant = secondPartSplit.slice(1).join(\"\"); // Remaining part is varyant\n        } else { // If no space or first part is long, assume it's just varyant\n            processedTip = secondPart.toUpperCase().substring(0,3); // Still take first 3 for tip\n            processedVaryant = secondPart; // And the whole thing as varyant\n        }\n        processedVersiyon = partsSlashDelimited[2].trim();\n\n    } else {\n        const noSpaceCombined = combinedData.replace(/\\s+/g, '').toUpperCase();\n        // Example: \"225CXE1A TFB7R\" -> \"225CXE1ATFB7R\"\n        // Example: \"225CXL1A TC6C\" -> \"225CXL1ATC6C\"\n\n        if (noSpaceCombined.length >= 3) {\n            processedTip = noSpaceCombined.substring(0, 3);\n            if (noSpaceCombined.length >= 8) { // 3 for tip + 5 for varyant\n                processedVaryant = noSpaceCombined.substring(3, 8);\n                if (noSpaceCombined.length > 8) {\n                    processedVersiyon = noSpaceCombined.substring(8);\n                }\n            } else if (noSpaceCombined.length > 3) { // Has tip, but not enough for full 5-char varyant\n                processedVaryant = noSpaceCombined.substring(3);\n            }\n        } else if (noSpaceCombined.length > 0) { // Too short for 3-char tip rule\n            processedVaryant = noSpaceCombined; // Assign all to varyant as a fallback\n        }\n    }\n  }\n\n  return {\n    saseNo: processedSaseNo,\n    marka: processedMarka,\n    tipOnayNo: processedTipOnayNo,\n    tip: processedTip,\n    varyant: processedVaryant,\n    versiyon: processedVersiyon,\n    // tipVaryantVersiyonCombined is not returned to the client\n  };\n});\n\n    "],"names":[],"mappings":";;;;;IAsCsB","debugId":null}},
    {"offset": {"line": 245, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/separator.tsx"],"sourcesContent":["\n\"use client\"\n\nimport * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n\n"],"names":[],"mappings":";;;;AAGA;AACA;AAEA;AALA;;;;;AAOA,MAAM,0BAAY,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAI/B,CACE,EAAE,SAAS,EAAE,cAAc,YAAY,EAAE,aAAa,IAAI,EAAE,GAAG,OAAO,EACtE,oBAEA,8OAAC,qKAAA,CAAA,OAAuB;QACtB,KAAK;QACL,YAAY;QACZ,aAAa;QACb,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,sBACA,gBAAgB,eAAe,mBAAmB,kBAClD;QAED,GAAG,KAAK;;;;;;AAIf,UAAU,WAAW,GAAG,qKAAA,CAAA,OAAuB,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 276, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/page.tsx"],"sourcesContent":["\n'use client';\n\nimport type { ChangeEvent } from 'react';\nimport React, { useState, useCallback, useEffect, useRef } from 'react';\nimport Link from 'next/link'; // Import Link\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Camera, CheckCircle, XCircle, Loader2, ScanLine, Search, FileCheck, ArrowLeft } from 'lucide-react'; // Import FileCheck and ArrowLeft icons\nimport {\n  extractDataFromVehicleLicense,\n  type ExtractDataFromVehicleLicenseOutput,\n} from '@/ai/flows/extract-data-from-vehicle-license';\nimport { useToast } from '@/hooks/use-toast';\nimport Image from 'next/image';\nimport { Separator } from '@/components/ui/separator';\nimport { type ApprovalFormData } from '@/data/approval-data'; // Import shared data type only\n\n// Interface for data from a single scan\ninterface ScanData extends ExtractDataFromVehicleLicenseOutput {\n  [key: string]: string | undefined;\n}\n\n// Updated FormData interface to hold data for two scans\ninterface FormData {\n  scan1: ScanData;\n  scan2: ScanData;\n}\n\n// Initial state for a single scan\nconst initialScanData: ScanData = {\n  saseNo: '',\n  marka: '',\n  tipOnayNo: '', // This will be from Ruhsat Tarama\n  tip: '',       // This will be from Etiket Tarama (derived)\n  varyant: '',   // This will be from Etiket Tarama\n  versiyon: '',  // This will be from Etiket Tarama\n};\n\n// Updated initial form data for two scans\nconst initialFormData: FormData = {\n  scan1: { ...initialScanData },\n  scan2: { ...initialScanData },\n};\n\ntype ComparisonResultStatus = 'uygun' | 'uygun değil' | 'bekleniyor' | 'eksik veri';\n\ninterface ComparisonResult {\n    status: ComparisonResultStatus;\n    matchingSeriTadilatTipOnayi?: string | null;\n}\n\n// Helper function to get placeholder text\nconst getPlaceholder = (fieldName: keyof ScanData, scanAreaType: 'ruhsat' | 'etiket') => {\n    const placeholders: Record<keyof ScanData, string> = {\n        saseNo: \"Şase Numarası Girin\",\n        marka: \"Marka Girin\",\n        tipOnayNo: \"Tip Onay No Girin (örn: e1*xxxx/xx*xxxx*xx)\", // Placeholder for Ruhsat's Tip Onay No\n        tip: \"Tip Girin (örn: 225)\", // Placeholder for Etiket's Tip\n        varyant: \"Varyant Girin (örn: CXE1A)\", // Placeholder for Etiket's Varyant\n        versiyon: \"Versiyon Girin (örn: TFB7R)\", // Placeholder for Etiket's Versiyon\n    };\n\n    if (scanAreaType === 'ruhsat') {\n        if (fieldName === 'saseNo' || fieldName === 'marka' || fieldName === 'tipOnayNo') {\n            return placeholders[fieldName];\n        }\n        return `${placeholders[fieldName]} (Etiketten beklenir)`;\n    } else { // etiket\n        if (fieldName === 'tip' || fieldName === 'varyant' || fieldName === 'versiyon') {\n            return placeholders[fieldName];\n        }\n         return `${placeholders[fieldName]} (Ruhsattan beklenir)`;\n    }\n};\n\n\n// Reusable Scan Area Component\nconst ScanArea = ({\n    scanAreaType, // 'ruhsat' or 'etiket'\n    title,\n    scannedImage,\n    isScanning,\n    formDataScan,\n    fileInputRef,\n    triggerFileInput,\n    handleImageUpload,\n    handleManualScan,\n    handleInputChange,\n  }: {\n    scanAreaType: 'ruhsat' | 'etiket';\n    title: string;\n    scannedImage: string | null;\n    isScanning: boolean;\n    formDataScan: ScanData;\n    fileInputRef: React.RefObject<HTMLInputElement>;\n    triggerFileInput: (scanAreaType: 'ruhsat' | 'etiket') => void;\n    handleImageUpload: (e: ChangeEvent<HTMLInputElement>, scanAreaType: 'ruhsat' | 'etiket') => void;\n    handleManualScan: (scanAreaType: 'ruhsat' | 'etiket') => void;\n    handleInputChange: (e: ChangeEvent<HTMLInputElement>, scanAreaType: 'ruhsat' | 'etiket', fieldName: keyof ScanData) => void;\n  }) => (\n    <div className=\"space-y-4 border p-4 rounded-lg shadow-sm bg-card\">\n      <h3 className=\"text-lg font-semibold text-foreground mb-2 border-b pb-2\">{title}</h3>\n      <div className=\"relative aspect-video w-full bg-muted rounded-md overflow-hidden border border-dashed flex items-center justify-center\">\n        {isScanning ? (\n          <div className=\"flex flex-col items-center text-muted-foreground\">\n            <Loader2 className=\"h-12 w-12 animate-spin mb-2\" />\n            <p>Taranıyor...</p>\n          </div>\n        ) : scannedImage ? (\n          <Image\n            src={scannedImage}\n            alt={`Taranan Görsel - ${title}`}\n            layout=\"fill\"\n            objectFit=\"contain\"\n            data-ai-hint={scanAreaType === 'ruhsat' ? \"vehicle registration license\" : \"vehicle identification plate\"}\n          />\n        ) : (\n          <div className=\"flex flex-col items-center text-muted-foreground p-4 text-center\">\n            <ScanLine className=\"h-12 w-12 mb-2\" />\n            <p>{title} için görsel yükleyin.</p>\n          </div>\n        )}\n      </div>\n      <div className=\"flex flex-col sm:flex-row gap-2\">\n        <Button\n          onClick={() => triggerFileInput(scanAreaType)}\n          disabled={isScanning}\n          className=\"flex-1 bg-primary hover:bg-primary/90 text-primary-foreground\"\n        >\n          <Camera className=\"mr-2 h-4 w-4\" />\n          Görsel Seç/Değiştir\n        </Button>\n        <Button\n          onClick={() => handleManualScan(scanAreaType)}\n          disabled={isScanning || !scannedImage}\n          variant=\"secondary\"\n          className=\"flex-1\"\n        >\n          {isScanning ? (\n            <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n          ) : (\n            <Search className=\"mr-2 h-4 w-4\" />\n          )}\n          {isScanning ? 'Taranıyor...' : `${title} Tara`}\n        </Button>\n      </div>\n       <Input\n        ref={fileInputRef}\n        type=\"file\"\n        accept=\"image/*\"\n        onChange={(e) => handleImageUpload(e, scanAreaType)}\n        className=\"hidden\"\n        id={`file-scan-${scanAreaType}`}\n      />\n      <div className=\"space-y-3 mt-4\">\n          {scanAreaType === 'ruhsat' && (\n            <>\n              <div>\n                <Label htmlFor={`saseNo-ruhsat`} className=\"text-sm font-medium text-foreground\">Şase Numarası</Label>\n                <Input\n                  id={`saseNo-ruhsat`}\n                  name=\"saseNo\"\n                  value={formDataScan.saseNo || ''}\n                  onChange={(e) => handleInputChange(e, scanAreaType, 'saseNo')}\n                  placeholder={getPlaceholder('saseNo', scanAreaType)}\n                  className=\"mt-1\"\n                />\n              </div>\n              <div>\n                <Label htmlFor={`marka-ruhsat`} className=\"text-sm font-medium text-foreground\">Marka</Label>\n                <Input\n                  id={`marka-ruhsat`}\n                  name=\"marka\"\n                  value={formDataScan.marka || ''}\n                  onChange={(e) => handleInputChange(e, scanAreaType, 'marka')}\n                  placeholder={getPlaceholder('marka', scanAreaType)}\n                  className=\"mt-1\"\n                />\n              </div>\n              <div>\n                <Label htmlFor={`tipOnayNo-ruhsat`} className=\"text-sm font-medium text-foreground\">Tip Onay No</Label>\n                <Input\n                  id={`tipOnayNo-ruhsat`}\n                  name=\"tipOnayNo\"\n                  value={formDataScan.tipOnayNo || ''}\n                  onChange={(e) => handleInputChange(e, scanAreaType, 'tipOnayNo')}\n                  placeholder={getPlaceholder('tipOnayNo', scanAreaType)}\n                  className=\"mt-1\"\n                />\n              </div>\n            </>\n          )}\n          {scanAreaType === 'etiket' && (\n            <>\n              <div>\n                <Label htmlFor={`tip-etiket`} className=\"text-sm font-medium text-foreground\">Tip</Label>\n                <Input\n                  id={`tip-etiket`}\n                  name=\"tip\"\n                  value={formDataScan.tip || ''}\n                  onChange={(e) => handleInputChange(e, scanAreaType, 'tip')}\n                  placeholder={getPlaceholder('tip', scanAreaType)} // Placeholder for \"Tip Girin\"\n                   className=\"mt-1\"\n                />\n              </div>\n              <div>\n                <Label htmlFor={`varyant-etiket`} className=\"text-sm font-medium text-foreground\">Varyant</Label>\n                <Input\n                  id={`varyant-etiket`}\n                  name=\"varyant\"\n                  value={formDataScan.varyant || ''}\n                  onChange={(e) => handleInputChange(e, scanAreaType, 'varyant')}\n                  placeholder={getPlaceholder('varyant', scanAreaType)}\n                  className=\"mt-1\"\n                />\n              </div>\n              <div>\n                <Label htmlFor={`versiyon-etiket`} className=\"text-sm font-medium text-foreground\">Versiyon</Label>\n                <Input\n                  id={`versiyon-etiket`}\n                  name=\"versiyon\"\n                  value={formDataScan.versiyon || ''}\n                  onChange={(e) => handleInputChange(e, scanAreaType, 'versiyon')}\n                  placeholder={getPlaceholder('versiyon', scanAreaType)}\n                  className=\"mt-1\"\n                />\n              </div>\n             </>\n          )}\n      </div>\n    </div>\n  );\n\nexport default function Home() {\n  const [formData, setFormData] = useState<FormData>(initialFormData);\n  const [isScanningRuhsat, setIsScanningRuhsat] = useState(false);\n  const [isScanningEtiket, setIsScanningEtiket] = useState(false);\n  const [scannedImageRuhsat, setScannedImageRuhsat] = useState<string | null>(null);\n  const [scannedImageEtiket, setScannedImageEtiket] = useState<string | null>(null);\n  const [comparisonResult, setComparisonResult] =\n    useState<ComparisonResult>({ status: 'bekleniyor', matchingSeriTadilatTipOnayi: null });\n  const [approvalData, setApprovalData] = useState<ApprovalFormData[]>([]); // State for approval data\n  const { toast } = useToast();\n  const fileInputRefRuhsat = useRef<HTMLInputElement>(null);\n  const fileInputRefEtiket = useRef<HTMLInputElement>(null);\n\n\n  // Load approval data from localStorage on component mount\n  useEffect(() => {\n    if (typeof window !== 'undefined') {\n      const storedData = localStorage.getItem('approvalData');\n      if (storedData) {\n        try {\n          const parsedData = JSON.parse(storedData) as ApprovalFormData[];\n          setApprovalData(parsedData);\n        } catch (error) {\n          console.error(\"Error parsing approvalData from localStorage on main page:\", error);\n        }\n      }\n    }\n  }, []);\n\n\n  const hasAnyScanData = (scan: ScanData): boolean => {\n      return Object.values(scan).some(value => !!value && String(value).trim() !== '');\n  }\n\n  const hasRequiredComparisonData = (data: FormData): boolean => {\n      const marka = data.scan1.marka; // Marka from Ruhsat\n      const tipOnayNo = data.scan1.tipOnayNo; // Tip Onay No from Ruhsat\n      const varyant = data.scan2.varyant; // Varyant from Etiket\n      const versiyon = data.scan2.versiyon; // Versiyon from Etiket\n      return !!marka && !!tipOnayNo && !!varyant && !!versiyon;\n  }\n\n\n  const handleInputChange = useCallback((\n    e: ChangeEvent<HTMLInputElement>,\n    scanAreaType: 'ruhsat' | 'etiket',\n    fieldName: keyof ScanData\n  ) => {\n    const { value } = e.target;\n    const scanKey = scanAreaType === 'ruhsat' ? 'scan1' : 'scan2';\n\n    setFormData(prevData => ({\n      ...prevData,\n      [scanKey]: {\n        ...prevData[scanKey],\n        [fieldName]: value,\n      },\n    }));\n  }, []);\n\n\n  const handleImageUpload = useCallback(async (\n    e: ChangeEvent<HTMLInputElement>,\n    scanAreaType: 'ruhsat' | 'etiket'\n  ) => {\n    const file = e.target.files?.[0];\n    if (!file) return;\n\n    const setIsScanning = scanAreaType === 'ruhsat' ? setIsScanningRuhsat : setIsScanningEtiket;\n    const setScannedImage = scanAreaType === 'ruhsat' ? setScannedImageRuhsat : setScannedImageEtiket;\n    const fileInputRef = scanAreaType === 'ruhsat' ? fileInputRefRuhsat : fileInputRefEtiket;\n    const scanNumber = scanAreaType === 'ruhsat' ? 1 : 2;\n    \n    setIsScanning(false);\n    setComparisonResult({ status: 'bekleniyor', matchingSeriTadilatTipOnayi: null });\n\n    const reader = new FileReader();\n    reader.readAsDataURL(file);\n    reader.onload = () => {\n      const base64Image = reader.result as string;\n      setScannedImage(base64Image);\n      toast({\n        title: `Görsel ${scanNumber} (${scanAreaType === 'ruhsat' ? 'Ruhsat' : 'Etiket'}) Yüklendi`,\n        description: `Görsel taramaya hazır. \"${scanAreaType === 'ruhsat' ? 'Ruhsat' : 'Etiket'} Tara\" butonuna tıklayın.`,\n      });\n    };\n    reader.onerror = error => {\n      console.error('Error reading file:', error);\n      toast({\n        title: 'Dosya Okuma Hatası',\n        description: `Görsel ${scanNumber} (${scanAreaType === 'ruhsat' ? 'Ruhsat' : 'Etiket'}) dosyası okunurken bir hata oluştu.`,\n        variant: 'destructive',\n      });\n      setScannedImage(null);\n    };\n\n    if (fileInputRef.current) {\n      fileInputRef.current.value = '';\n    }\n  }, [toast]);\n\n\n  const handleManualScan = useCallback(async (scanAreaType: 'ruhsat' | 'etiket') => {\n    const scannedImage = scanAreaType === 'ruhsat' ? scannedImageRuhsat : scannedImageEtiket;\n    const setIsScanning = scanAreaType === 'ruhsat' ? setIsScanningRuhsat : setIsScanningEtiket;\n    const isScanning = scanAreaType === 'ruhsat' ? isScanningRuhsat : isScanningEtiket;\n    const scanKey = scanAreaType === 'ruhsat' ? 'scan1' : 'scan2';\n    const scanNumber = scanAreaType === 'ruhsat' ? 1 : 2;\n    const scanTitle = scanAreaType === 'ruhsat' ? 'Ruhsat' : 'Etiket';\n\n    if (isScanning) return;\n\n    if (!scannedImage) {\n      toast({\n        title: `${scanTitle} Görseli Yok`,\n        description: `Lütfen önce taramak için ${scanTitle} görselini yükleyin.`,\n        variant: 'destructive',\n      });\n      return;\n    }\n\n    setIsScanning(true);\n    setComparisonResult({ status: 'bekleniyor', matchingSeriTadilatTipOnayi: null });\n\n    try {\n      const result = await extractDataFromVehicleLicense({\n        licenseImageDataUri: scannedImage,\n      });\n\n      setFormData(prevData => {\n        const updatedScanData = { ...prevData[scanKey] };\n\n        if (scanAreaType === 'ruhsat') { // Ruhsat Tarama\n          if (result.saseNo) updatedScanData.saseNo = result.saseNo;\n          if (result.marka) updatedScanData.marka = result.marka;\n          if (result.tipOnayNo) updatedScanData.tipOnayNo = result.tipOnayNo; // Ruhsattan Tip Onay No\n          // Explicitly do NOT update tip, varyant, versiyon from Ruhsat scan\n        } else { // Etiket Tarama\n          if (result.tip) updatedScanData.tip = result.tip;\n          if (result.varyant) updatedScanData.varyant = result.varyant;\n          if (result.versiyon) updatedScanData.versiyon = result.versiyon;\n           // Explicitly do NOT update saseNo, marka, tipOnayNo from Etiket scan\n        }\n\n        return {\n          ...prevData,\n          [scanKey]: updatedScanData,\n        };\n      });\n\n      toast({\n        title: `${scanTitle} Tarama Başarılı`,\n        description: `Araç verileri ${scanNumber}. görselden (${scanTitle}) başarıyla okundu.`,\n      });\n    } catch (error) {\n      console.error(`Error extracting data for ${scanTitle} scan:`, error);\n      toast({\n        title: `${scanTitle} Tarama Hatası`,\n        description: `Araç verileri ${scanNumber}. görselden (${scanTitle}) okunurken bir hata oluştu. Lütfen manuel kontrol edin.`,\n        variant: 'destructive',\n      });\n    } finally {\n      setIsScanning(false);\n    }\n  }, [scannedImageRuhsat, scannedImageEtiket, isScanningRuhsat, isScanningEtiket, toast]);\n\n\n  const triggerFileInput = useCallback((scanAreaType: 'ruhsat' | 'etiket') => {\n    const fileInputRef = scanAreaType === 'ruhsat' ? fileInputRefRuhsat : fileInputRefEtiket;\n    fileInputRef.current?.click();\n  }, []);\n\n  const compareData = useCallback(() => {\n    const ruhsatData = formData.scan1; // Ruhsat\n    const etiketData = formData.scan2; // Etiket\n    const isScanning = isScanningRuhsat || isScanningEtiket;\n\n    // Required data for comparison:\n    // Marka from Ruhsat (scan1.marka)\n    // Tip Onay No from Ruhsat (scan1.tipOnayNo)\n    // Varyant from Etiket (scan2.varyant)\n    // Versiyon from Etiket (scan2.versiyon)\n    const combinedDataForComparison: Partial<ApprovalFormData> = {\n        marka: ruhsatData.marka || '',\n        tipOnayNo: ruhsatData.tipOnayNo || '', // Use Tip Onay No from Ruhsat\n        varyant: etiketData.varyant || '',\n        versiyon: etiketData.versiyon || '',\n        // seriTadilatTipOnayi is for matching, not direct input here\n    };\n\n\n    if (isScanning) {\n        setComparisonResult({ status: 'bekleniyor', matchingSeriTadilatTipOnayi: null });\n        return;\n    }\n\n    if (!hasRequiredComparisonData(formData)) {\n        if (scannedImageRuhsat || scannedImageEtiket || hasAnyScanData(ruhsatData) || hasAnyScanData(etiketData)) {\n             setComparisonResult({ status: 'eksik veri', matchingSeriTadilatTipOnayi: null });\n        } else {\n            setComparisonResult({ status: 'bekleniyor', matchingSeriTadilatTipOnayi: null });\n        }\n        return;\n    }\n\n    const matchingApproval = approvalData.find(approval =>\n        approval.marka.toLowerCase() === combinedDataForComparison.marka?.toLowerCase() &&\n        approval.tipOnayNo.toLowerCase() === combinedDataForComparison.tipOnayNo?.toLowerCase() && // Compare with Ruhsat's Tip Onay No\n        approval.varyant.toLowerCase() === combinedDataForComparison.varyant?.toLowerCase() &&\n        approval.versiyon.toLowerCase() === combinedDataForComparison.versiyon?.toLowerCase()\n    );\n\n\n    if (matchingApproval) {\n        setComparisonResult({ status: 'uygun', matchingSeriTadilatTipOnayi: matchingApproval.seriTadilatTipOnayi });\n    } else {\n        setComparisonResult({ status: 'uygun değil', matchingSeriTadilatTipOnayi: null });\n    }\n\n  }, [formData, isScanningRuhsat, isScanningEtiket, scannedImageRuhsat, scannedImageEtiket, approvalData]);\n\n\n  useEffect(() => {\n    compareData();\n  }, [formData, isScanningRuhsat, isScanningEtiket, scannedImageRuhsat, scannedImageEtiket, approvalData, compareData]);\n\n\n  const getResultIcon = () => {\n    const isScanning = isScanningRuhsat || isScanningEtiket;\n     if (isScanning) return <Loader2 className=\"h-6 w-6 animate-spin text-muted-foreground\" />;\n\n    switch (comparisonResult.status) {\n      case 'uygun':\n        return <CheckCircle className=\"h-6 w-6 text-green-500\" />;\n      case 'uygun değil':\n        return <XCircle className=\"h-6 w-6 text-red-500\" />;\n       case 'eksik veri':\n         return <ScanLine className=\"h-6 w-6 text-yellow-500\" />;\n      default: // bekleniyor\n        if (scannedImageRuhsat || scannedImageEtiket || hasAnyScanData(formData.scan1) || hasAnyScanData(formData.scan2)) {\n            return <ScanLine className=\"h-6 w-6 text-muted-foreground opacity-50\" />;\n        }\n        return null;\n    }\n  };\n\n  const getResultText = () => {\n     const isScanning = isScanningRuhsat || isScanningEtiket;\n     if (isScanning) return 'Karşılaştırılıyor...';\n\n    switch (comparisonResult.status) {\n      case 'uygun':\n        return `Uygun (${comparisonResult.matchingSeriTadilatTipOnayi || 'N/A'})`;\n      case 'uygun değil':\n        return 'Uygun Değil';\n      case 'eksik veri':\n         return 'Eksik Veri';\n      default: // bekleniyor\n        if (scannedImageRuhsat || scannedImageEtiket || hasAnyScanData(formData.scan1) || hasAnyScanData(formData.scan2)) {\n           return 'Karşılaştırma Bekleniyor';\n        }\n        return 'Başlamak için Veri Girin/Tarayın';\n    }\n  };\n\n\n  const getResultColor = () => {\n     const isScanning = isScanningRuhsat || isScanningEtiket;\n     if (isScanning) return 'text-muted-foreground';\n\n    switch (comparisonResult.status) {\n      case 'uygun':\n        return 'text-green-600';\n      case 'uygun değil':\n        return 'text-red-600';\n       case 'eksik veri':\n         return 'text-yellow-600';\n      default: // bekleniyor\n        return 'text-muted-foreground';\n    }\n  };\n\n   const getResultBgColor = () => {\n    const isScanning = isScanningRuhsat || isScanningEtiket;\n     if (isScanning) return 'border-muted bg-muted/50';\n\n    switch (comparisonResult.status) {\n      case 'uygun':\n        return 'border-green-200 bg-green-50';\n      case 'uygun değil':\n        return 'border-red-200 bg-red-50';\n       case 'eksik veri':\n         return 'border-yellow-200 bg-yellow-50';\n      default: // bekleniyor\n        if (scannedImageRuhsat || scannedImageEtiket || hasAnyScanData(formData.scan1) || hasAnyScanData(formData.scan2)) {\n            return 'border-muted bg-muted/50';\n        }\n        return 'border-transparent bg-transparent';\n    }\n  };\n\n\n  return (\n    <div className=\"flex min-h-screen items-start justify-center bg-gradient-to-br from-background to-muted/60 p-4 sm:p-8\">\n      <Card className=\"w-full max-w-6xl shadow-xl bg-card/80 backdrop-blur-sm\">\n        <CardHeader>\n          <CardTitle className=\"text-2xl font-bold text-center text-primary\">\n            Araç Ruhsat/Etiket Karşılaştırıcı\n          </CardTitle>\n          <CardDescription className=\"text-center text-muted-foreground\">\n            Ruhsat ve etiket fotoğraflarını yükleyerek bilgileri otomatik doldurun veya manuel girin ve onaylı tip verileriyle eşleşip eşleşmediğini kontrol edin.\n          </CardDescription>\n          <div className=\"flex justify-center mt-4\">\n             <Link href=\"/seri-tadilat-onay\" passHref>\n               <Button variant=\"outline\">\n                 <FileCheck className=\"mr-2 h-4 w-4\" />\n                 Seri Tadilat Tip Onay Veri Yönetimi\n               </Button>\n             </Link>\n           </div>\n        </CardHeader>\n        <CardContent className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n             <ScanArea\n                scanAreaType=\"ruhsat\"\n                title=\"Ruhsat Tarama\"\n                scannedImage={scannedImageRuhsat}\n                isScanning={isScanningRuhsat}\n                formDataScan={formData.scan1}\n                fileInputRef={fileInputRefRuhsat}\n                triggerFileInput={triggerFileInput}\n                handleImageUpload={handleImageUpload}\n                handleManualScan={handleManualScan}\n                handleInputChange={handleInputChange}\n             />\n              <ScanArea\n                scanAreaType=\"etiket\"\n                title=\"Etiket Tarama\"\n                scannedImage={scannedImageEtiket}\n                isScanning={isScanningEtiket}\n                formDataScan={formData.scan2}\n                fileInputRef={fileInputRefEtiket}\n                triggerFileInput={triggerFileInput}\n                handleImageUpload={handleImageUpload}\n                handleManualScan={handleManualScan}\n                handleInputChange={handleInputChange}\n             />\n          </div>\n\n           <Separator className=\"my-6\" />\n\n           <div className=\"mt-6 pt-4\">\n              <h3 className=\"text-xl font-semibold text-foreground mb-3 text-center\">Karşılaştırma Sonucu</h3>\n               <div className={`flex items-center justify-center gap-3 p-4 rounded-md border ${getResultBgColor()} transition-colors duration-300 min-h-[68px]`}>\n                  {getResultIcon()}\n                  <span className={`text-lg font-medium ${getResultColor()} transition-colors duration-300`}>{getResultText()}</span>\n              </div>\n               <p className=\"text-xs text-muted-foreground mt-2 text-center h-8\">\n                   {comparisonResult.status === 'eksik veri' && !isScanningRuhsat && !isScanningEtiket && \"Karşılaştırma için Ruhsattan Marka ve Tip Onay No; Etiketten Varyant ve Versiyon bilgileri gereklidir.\"}\n                   {comparisonResult.status === 'bekleniyor' && !isScanningRuhsat && !isScanningEtiket && !(scannedImageRuhsat || scannedImageEtiket || hasAnyScanData(formData.scan1) || hasAnyScanData(formData.scan2)) && \"Başlamak için görselleri yükleyip tarayın veya bilgileri manuel girin.\"}\n                   {(isScanningRuhsat || isScanningEtiket) && \"Taranan veriler karşılaştırılıyor...\"}\n                   {comparisonResult.status === 'uygun' && !isScanningRuhsat && !isScanningEtiket && `Veriler onaylı seri tadilat tip onayı (${comparisonResult.matchingSeriTadilatTipOnayi || 'N/A'}) ile eşleşiyor.`}\n                   {comparisonResult.status === 'uygun değil' && !isScanningRuhsat && !isScanningEtiket && \"Girilen/Taranan veriler herhangi bir onaylı tip ile eşleşmiyor!\"}\n               </p>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\n    "],"names":[],"mappings":"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","debugId":null}}]
}